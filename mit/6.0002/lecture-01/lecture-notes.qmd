---
title: MIT 6.0002 - Lecture 1 Notes
format: html
jupyter: python3
---

[Source](https://ocw.mit.edu/courses/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/resources/mit6_0002f16_lec1/)

Topics covered in this lecture:

- Computational Models
- Optimization Models

# Computational Models
- Using computation to help understand the world in which we live
- Experimental devices that help us to understand something that has happened or to predict the future

# Optimization Models

## What Is It?
- An objective function that is to be maximized or minimized
- A set of contraints (possibly empty) that must be honored

## Example: Knapsack Problem
- Problem Setup
  - You have limited strength, so there is a maximum weight knapsack that you can carry
  - You would like to take more stuff than you can carry
  - How do you choose which stuff to take and which to leave behind?
- Two Variances
  - 0/1 Knapsack Problem
  - Continuous/Fractional Knapsack Problem

### The 0/1 Knapsack Problem
- Each item is represented by a pair *<value, weight>*
- The knapsack can accommodate items with a total weight of no more than *w*
- A vector, *L*, of length *n*, represents the set of available items
- A vector *V*, of length *n*, is used to indicate whether or not items are takens
  - If *V[i] = 1*, then item *L[i]* is taken
  - If *V[i] = 0*, then item *L[i]* is not taken
- Ultimiately, want to
  1. Maximize:
    $$
    \sum_{i=0}^{n-1} V[i] * I[i].value
    $$
  
  2. Subject to the constraint that:

    $$
    \sum_{i=0}^{n-1} V[i] * I[i].weight \le w
    $$

### Brute Force Algorithm
- Algorithm steps:
  1. Enumerate all possible combinations of items
    - Generate all subsets of the sets of items (called the **power set**)
  2. Remove all combinations whose total units exceed the allowed weight
  3. From the remaining combinations, choose any one whose value is the largest
- It is often not practical
  - How big is the power set?
  - How many possible different values can *V* have?
    - As many different binary numbers as can be represented in *n* bits
  - *E.g.*, if there are 100 items to choose from, the size of the power set is: 
    - 1,267,650,600,228,229,401,496,703,205,376
- The 0/1 Knapsack Problem is inherently exponential

### Greedy Algorithm
- A greedy algorithm makes the locally optimal choice at each stage, even if it is not the globally optimal
- Example for the 0/1 Knapsack problem:

```{python}
#| eval: false
while knapsack not full:
  knapsack.add(item.best)
```

- But what does best mean?
  - Most valuable
  - Least expensive
  - Highest value/units

- Another example: choose what you want to eat for a meal that
  1. Maximize "value"
  2. Restrict calories to less than 750

| Food   | Value | Calories |
|:------:|:-----:|:--------:|
| Wine   | 89    | 123      |
| Beer   | 90    | 154      |
| Pizza  | 30    | 258      |
| Burger | 50    | 354      |
| Fries  | 90    | 365      |
| Coke   | 79    | 150      |
| Apple  | 90    | 95       |
| Donut  | 10    | 195      |

```{python}
#> Define a class for Food

class Food(object):
  def __init__(self, n, v, w):
    self.name = n
    self.value = v
    self.calories = w

  def getValue(self):
    return self.value
  
  def getCost(self):
    return self.calories
  
  def density(self):
    return self.getValue() / self.getCost()
  
  def __str__(self):
    return self.name + ': <' + str(self.value) \
      + ', ' + str(self.calories) + '>'
```

```{python}
#> Build a Menu of Foods

def buildMenu(names, values, calories):
  """names, values, calories lists of same length.
     name: a list of strings
     values and calories: list of numbers
     returns a list of Foods"""
  menu = []

  for i in range(len(values)):
    menu.append(Food(names[i], values[i], calories[i]))
  
  return menu
```

```{python}
#> Implement of flexible greedy algorithm

def greedy(items, maxCost, keyFunction):
  """Assumes items is a list, maxCost >= 0
     keyFunction maps elements of items to numbers"""
  itemsCopy = sorted(items, key = keyFunction, reverse=True)

  result = []
  totalValue, totalCost = 0.0, 0.0

  for i in range(len(itemsCopy)):
    if (totalCost + itemsCopy[i].getCost()) <= maxCost:
      result.append(itemsCopy[i])
      totalCost += itemsCopy[i].getCost()
      totalValue += itemsCopy[i].getValue()
  
  return (result, totalValue)
```

### Lambda Functions
- Used to create anonymous functions

```{python}
#> Testing greedy
def testGreedy(items, constraint, keyFunction):
  taken, val = greedy(items, constraint, keyFunction)

  print('Total value of items taken =', val)

  for item in taken:
    print(' ', item)


def testGreedys(foods, maxUnits):
  print('Use greedy by value to allocate', maxUnits, 'calories')
  testGreedy(foods, maxUnits, Food.getValue)

  print('\nUse greedy by cost to allocate', maxUnits, 'calories')
  testGreedy(foods, maxUnits, lambda x: 1/Food.getCost(x))

  print('\nUse greedy by density to allocate', maxUnits, 'calories')
  testGreedy(foods, maxUnits, Food.density)

names = ['wine', 'beer', 'pizza', 'burger', 'fries', 'cola', 'apple', 'donut', 'cake']
values = [89, 90, 95, 100, 90, 79, 50, 10]
calories = [123, 154, 258, 354, 365, 150, 95, 195]
foods = buildMenu(names, values, calories)

testGreedys(foods, 750)
```

- Why different answers?
  - Sequence of locally optimal choices do not always yield a globally optimal solution
- Greedy algorithms are:
  - Easy to implement
  - Computationally efficient
  - Does not always yield the best solution
    - Do not even know how good the approximation is