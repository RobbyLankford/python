---
title: MIT 6.0002 - Lecture 5 Notes
format: html
jupyter: python3
---

[Source](https://ocw.mit.edu/courses/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/resources/mit6_0002f16_lec5/)

Topics covered in this lecture:

- Random Walks
  - Simulations
  - Visualizing

# Random Walks

## Simulation of Stumbling Drunks

### Background

- Person takes one step up, down, left, or right
- Person then takes another step in any of the directions
- In order to simulate this:
  - Simulate one walk of `k` steps
  - Simulate `n` such walks
  - Report average distance from origin at the end

### Abstractions

- Class of `Location`, which allows the drunk to move
  - `Location` is immutable, moving the drunk returns a new `Location` object

```{python}
class Location(object):
    def __init__(self, x, y):
        """x and y are floats"""
        self.x = x
        self.y = y
    
    def move(self, dX, dY):
        """dX and dY are floats"""
        return Location(self.x + dX, self.y + dY)
    
    def getX(self):
        return self.x
    
    def getY(self):
        return self.y
    
    def distFrom(self, other):
        xDist = self.x - other.getX()
        yDist = self.y - other.getY()

        return ((xDist ** 2) + (yDist ** 2)) ** 0.5
    
    def __str__(self):
        return '<' + str(self.x) + ', ' + str(self.y) + '>'
```

- Class of `Drunk`
  - Not to be useful on its own, but will be a base class to be inherited by other classes
  - Immutable, nothing to change

```{python}
class Drunk(object):
    def __init__(self, name=None):
        """Assumes name is a str"""
        self.name = name
    
    def __str__(self):
        if self != None:
            return self.name
        
        return 'Anonymous'
```

- Two subclasses of `Drunk`
  - `UsualDrunk`: wanders around at random
  - `MasochistDrunk`: tries to move northward
  - Also immutable, nothing to change

```{python}
import random

class UsualDrunk(Drunk):
    def takeStep(self):
        stepChoices = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        
        return random.choice(stepChoices)

class MasochistDrunk(Drunk):
    def takeStep(self):
        stepChoices = [(0.0, 1.1), (0.0, -0.9), (1.0, 0.0), (-1.0, 0.0)]

        return random.choice(stepChoices)
```

- Class of `Field`
  - The place where `Drunk`s wander
  - Mutable, you can add drunks to the field

```{python}
class Field(object):
    def __init__(self):
        self.drunks = {}
    
    def addDrunk(self, drunk, loc):
        if drunk in self.drunks:
            raise ValueError('Duplicate Drunk')
        else:
            self.drunks[drunk] = loc
    
    def getLoc(self, drunk):
        if drunk not in self.drunks:
            raise ValueError('Drunk not in the field')
        
        return self.drunks[drunk]
    
    def moveDrunk(self, drunk):
        if drunk not in self.drunks:
            raise ValueError('Drunk not in the field')
        
        xDist, yDist = drunk.takeStep()

        self.drunks[drunk] = self.drunks[drunk].move(xDist, yDist)
```

### Simulating a Single Walk

```{python}
def walk(f, d, numSteps):
    """Assumes: f a Field, d a Drunk in f, and numSteps an int >= 0.
       Moves d numSteps times.
       Returns the distance between the final location and the location at the start of the walk."""
    start = f.getLoc(d)

    for s in range(numSteps):
        f.moveDrunk(d)
    
    return start.distFrom(f.getLoc(d))
```

### Simulating Multiple Walks

```{python}
def simWalks(numSteps, numTrials, dClass):
    """Assumes numSteps an int >= 0, numTrials an int > 0, dClass a subclass of Drunk.
       Simulates numTrials walks of numSteps steps each.
       Returns a list of the final distances for each trial."""
    Homer = dClass("Homer")
    origin = Location(0, 0)
    distances = []

    for t in range(numTrials):
        f = Field()
        f.addDrunk(Homer, origin)
        distances.append(round(walk(f, Homer, numSteps), 1))
    
    return distances
```

### Putting It All Together

```{python}
def drunkTest(walkLengths, numTrials, dClass):
    """Assumes walkLengths a sequence of ints >= 0, numTrials an int > 0, dClass a subclass of Drunk.
       For each number of steps in walkLengths, runs simWalks with numTrials walks and prints results."""
    for numSteps in walkLengths:
        distances = simWalks(numSteps, numTrials, dClass)

        print(dClass.__name__, "random walk of", numSteps, "steps")
        print("Mean =", round(sum(distances) / len(distances), 4))
        print("Max =", max(distances), "Min =", min(distances))
        print()
```

- Start with a santity check, where we know the answer

```{python}
drunkTest((0, 1, 2), 100, UsualDrunk)
```

- When we are confident the simulation works, ramp it up

```{python}
drunkTest((10, 100, 1_000, 10_000), 100, UsualDrunk)
```

### Simulate Both Drunks

```{python}
def simAll(drunkKinds, walkLengths, numTrials):
    for dClass in drunkKinds:
        drunkTest(walkLengths, numTrials, dClass)
```

```{python}
random.seed(0)

simAll((UsualDrunk, MasochistDrunk), (1_000, 10_000), 100)
```

## Visualization of Simulation

### Background

- Pylab
  - NumPy: adds vectors, matrices, and many high-level mathematical functions
  - SciPy: adds mathematical classes and functions useful to scientists
  - MatPlotLib: adds an object-oriented API for plotting
  - PyLab: combines the other libraries to provide a MATLAB-like interface

```{python}
from matplotlib import pyplot as plt

xVals = [1, 2, 3, 4]
yVals1 = [1, 2, 3, 4]
yVals2 = [1, 7, 3, 5]

plt.plot(xVals, yVals1, 'b-', label='first')
plt.plot(xVals, yVals2, 'r--', label='second')
plt.legend()
```

### Back to Drunk Simulation

- Can plot the average number of steps from the origin for each type of Drunk
  - UsualDrunk is close to square root of the number of steps
  - MasochistDrunk is close to 5% of the number of steps

```{python}
class styleIterator(object):
    def __init__(self, styles):
        self.index = 0
        self.styles = styles
    
    def nextStyle(self):
        result = self.styles[self.index]

        if self.index == len(self.styles) - 1:
            self.index = 0
        else:
            self.index += 1
        
        return result
    
def simDrunk(numTrials, dClass, walkLengths):
    meanDistances = []

    for numSteps in walkLengths:
        print("Starting simulation of", numSteps, "steps")

        trials = simWalks(numSteps, numTrials, dClass)
        mean = sum(trials) / len(trials)
        meanDistances.append(mean)
    
    return meanDistances

def simAll(drunkKinds, walkLengths, numTrials):
    styleChoice = styleIterator(('m-', 'b--', 'g-.'))

    for dClass in drunkKinds:
        print("Starting simulation of", dClass.__name__, "...")

        curStyle = styleChoice.nextStyle()
        means = simDrunk(numTrials, dClass, walkLengths)
        
        plt.plot(walkLengths, means, curStyle, label = dClass.__name__)
    
    plt.title("Mean Distance from Origin (" + str(numTrials) + " trials)")
    plt.xlabel("Number of Steps")
    plt.ylabel("Distance from Origin")
    plt.legend(loc="best")
```

```{python}
import numpy as np

random.seed(0)

numSteps = (10, 100, 1_000, 10_000, 100_000)
simAll((UsualDrunk, MasochistDrunk), numSteps, 100)

plt.plot(numSteps, np.array(numSteps) ** 0.5, 'k-.', label="Square Root of Steps")
plt.plot(numSteps, np.array(numSteps) * 0.05, 'g-.', label="numSteps * 0.05")
plt.legend(loc="best")
```

- Can also plot all ending locations for each type of Drunk

```{python}
def getFinalLocs(numSteps, numTrials, dClass):
    locs = []
    d = dClass()

    for t in range(numTrials):
        f = Field()
        f.addDrunk(d, Location(0, 0))

        for s in range(numSteps):
            f.moveDrunk(d)
        
        locs.append(f.getLoc(d))
    
    return locs

def plotLocs(drunkKinds, numSteps, numTrials):
    styleChoice = styleIterator(('k+', 'r^', 'mo'))

    for dClass in drunkKinds:
        locs = getFinalLocs(numSteps, numTrials, dClass)
        xVals, yVals = [], []

        for loc in locs:
            xVals.append(loc.getX())
            yVals.append(loc.getY())
        
        xVals = np.array(xVals)
        yVals = np.array(yVals)
        meanX = sum(abs(xVals)) / len(xVals)
        meanY = sum(abs(yVals)) / len(yVals)
        curStyle = styleChoice.nextStyle()

        plt.plot(
            xVals, yVals, curStyle, 
            label=dClass.__name__ + " mean abs dist = <" + str(meanX) + ", " + str(meanY) + ">"
        )
        plt.title("Location at End of Walks (" + str(numSteps) + " steps")
        plt.ylim(-1000, 1000)
        plt.xlim(-1000, 1000)
        plt.xlabel("Steps East/West of Origin")
        plt.ylabel("Steps North/South of Origin")
        plt.legend(loc="lower center")

random.seed(0)
plotLocs((UsualDrunk, MasochistDrunk), 10_000, 1_000)
```

### Change the Simulation

- Add a strange kind of field that has wormholes to other spots on the field

```{python}
class OddField(Field):
    def __init__(self, numHoles = 1000, xRange = 100, yRange = 100):
        Field.__init__(self)
        self.wormholes = {}

        for w in range(numHoles):
            x = random.randint(-xRange, xRange)
            y = random.randint(-yRange, yRange)
            newX = random.randint(-xRange, xRange)
            newY = random.randint(-yRange, yRange)
            newLoc = Location(newX, newY)
            self.wormholes[(x, y)] = newLoc
    
    def moveDrunk(self, drunk):
        Field.moveDrunk(self, drunk)
        x = self.drunks[drunk].getX()
        y = self.drunks[drunk].getY()

        if (x, y) in self.wormholes:
            self.drunks[drunk] = self.wormholes[(x, y)]
```

```{python}
def getFinalLocs(numSteps, numTrials, dClass):
    locs = []
    d = dClass()

    for t in range(numTrials):
        f = OddField()
        f.addDrunk(d, Location(0, 0))

        for s in range(numSteps):
            f.moveDrunk(d)
        
        locs.append(f.getLoc(d))
    
    return locs

def traceWalk(fieldKinds, numSteps):
    styleChoice = styleIterator(('b+', 'r^', 'ko'))

    for fClass in fieldKinds:
        d = UsualDrunk()
        f = fClass()
        f.addDrunk(d, Location(0, 0))
        locs = []

        for s in range(numSteps):
            f.moveDrunk(d)
            locs.append(f.getLoc(d))

        xVals, yVals = [], []

        for loc in locs:
            xVals.append(loc.getX())
            yVals.append(loc.getY())
        
        curStyle = styleChoice.nextStyle()
        plt.plot(xVals, yVals, curStyle, label = fClass.__name__)
    
    plt.title("Spots Visited on Walk (" + str(numSteps) + ' Steps')
    plt.xlabel("Steps East/West of Origin")
    plt.ylabel("Steps North/South of Origin")
    plt.legend(loc = "best")

random.seed(0)
traceWalk((Field, OddField), 500)
```
