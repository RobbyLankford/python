---
title: MIT 6.0002 - Lecture 3 Notes
format: html
jupyter: python3
---

[Source](https://ocw.mit.edu/courses/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/resources/mit6_0002f16_lec3/)

Topics covered in this lecture:

- Graphs
- Depth First Search
- Breadth First Search

# Graphs

## What is a Graph?

- A try of data structure that consists of two elements
    1. Set of nodes (vertices)
        - Might have properties associated with them, such as names or other data
    2. Set of edges (arcs) each consisting of a pair of nodes
        - Undirected edges for a graph
        - Directed edges for a digraph
        - May be weighted or unweighted
- Graphs capture useful relationships among entities
  - For example:
    - Rail links between Paris and London
    - How the atoms in a molecule relate to one another
    - Ancestral relationships
- A special case is the tree
  - Directed graph in which any pair of nodes is connected by a single path

## Why are Graphs useful?

- The world is full of networks based on relationships
  - Computers, financial, political, *etc.*
- Also support inference on the structures they capture
  - Finding a sequence of links between elements (is there a path from A to B)
  - Finding the lease expensive path between elements (shortest path)
  - Partitioning the graph into sets of connected elements (graph partition)
  - Finding the most efficient way to separate sets of connected elements (min-cut/max-flow problem)

## Representing Graphs in code

- Create a class for a Node

```{python}
class Node(object):
    def __init__(self, name):
        """Assumes name is a string"""
        self.name = name
    
    def getName(self):
        return self.name
    
    def __str__(self):
        return self.name
```

- Create a class for an Edge

```{python}
class Edge(object):
    def __init__(self, src, dest):
        """Assumes src and dest are nodes"""
        self.src = src
        self.dest = dest
    
    def getSource(self):
        return self.src
    
    def getDestination(self):
        return self.dest
    
    def __str__(self):
        return self.src.getName() + '->' + self.dest.getName()
```

## Defining Digraphs

- Directed Graph, Edges pass in one direction only
- Stored as an adjacency matrix
  - Rows: source nodes
  - Columns: destination nodes
  - Cells[s, d] = 1 if there is an edge from s to d, 0 otherwise
    - The matrix is *not* symmetric
- Stored as an adjacency list
  - Associate with each node a list of destination nodes

```{python}
class Digraph(object):
    """edges is a dict mapping each node to a list of its children"""
    def __init__(self):
        self.edges = {}
    
    def addNode(self, node):
        if node in self.edges:
            raise ValueError("Duplicate node")
        else:
            self.edges[node] = []
    
    def addEdge(self, edge):
        src = edge.getSource()
        dest = edge.getDestination()

        if not (src in self.edges and dest in self.edges):
            raise ValueError("Node not in graph")
        else:
            self.edges[src].append(dest)
    
    def childrenOf(self, node):
        return self.edges[node]
    
    def hasNode(self, node):
        return node in self.edges
    
    def getNode(self, name):
        for n in self.edges:
            if n.getName() == name:
                return n
        
        raise NameError(name)
    
    def __str__(self):
        result = ''

        for src in self.edges:
            for dest in self.edges[src]:
                result = result + src.getName() + '->' + dest.getName() + '\n'
        
        # Omit the final new line
        return result[ :-1]
```

## Defining Graphs

- Graph does not have directionality associated with an edge
- Define as a subclass of Digraph
  - The Substitution Rule
  - Any program that works with a Digraph will also work with a Graph
    - But not *vice versa*

```{python}
class Graph(Digraph):
    # Change addEdge method to ensure no directionality
    def addEdge(self, edge):
        Digraph.addEdge(self, edge)
        rev = Edge(edge.getDestination(), edge.getSource())
        Digraph.addEdge(self, rev)
```

## Classic Optimization Problem: Shortest Path

- Shortest sequence of edges such that
    1. Source node of first edge is `n1`
    2. Destination of last edge is `n2`
    3. For edges, `e1` and `e2`, in the sequence, if `e2` follows `e1` in the sequence, the source of `e2` is the destination of `e1`
- Some examples:
  - Finding route from one city to another
  - Designing communication networks
  - Finding a path for a molecule through a chemical labyrinth
 
```{python}
def buildCityGraph(graphType):
    g = graphType()

    for name in ("Boston", "Providence", "New York", "Chicago", "Denver", "Phoenix", "Los Angeles"):
        g.addNode(Node(name))
    
    g.addEdge(Edge(g.getNode("Boston"), g.getNode("Providence")))
    g.addEdge(Edge(g.getNode("Boston"), g.getNode("New York")))
    g.addEdge(Edge(g.getNode("Providence"), g.getNode("Boston")))
    g.addEdge(Edge(g.getNode("Providence"), g.getNode("New York")))
    g.addEdge(Edge(g.getNode("New York"), g.getNode("Chicago")))
    g.addEdge(Edge(g.getNode("Chicago"), g.getNode("Denver")))
    g.addEdge(Edge(g.getNode("Chicago"), g.getNode("Phoenix")))
    g.addEdge(Edge(g.getNode("Denver"), g.getNode("Phoenix")))
    g.addEdge(Edge(g.getNode("Denver"), g.getNode("New York")))
    g.addEdge(Edge(g.getNode("Los Angeles"), g.getNode("Boston")))

    return g
```

# Depth First Search

Depth first search (DFS) is an algorithm for searching a graph that starts at the root node and explores as far as possible along each branch of the graph before backtracking.

## Steps

1. Start at an initial node
2. Consider all the edges that leave that node, in some order
3. Follow the first edge and check to see if you are at the goal node
4. If not, repeat the process from a new node
5. Continue until either find goal node or run out of options

## Algorithm 

```{python}
def printPath(path):
    """Assumes path is a list of nodes"""
    result = ""

    for i in range(len(path)):
        result = result + str(path[i])

        if i != len(path) - 1:
            result = result + '->'
        
    return result

def DFS(graph, start, end, path, shortest, toPrint = False):
    """Assumes graph is a Digraph; 
       start and end are nodes; 
       path and shortest are lists of nodes
       Returns a shortest path from start to end in graph"""

    path = path + [start]

    if start == end:
        return path
    
    for node in graph.childrenOf(start):
        # Avoid cycles
        if node not in path: 
            if shortest == None or len(path) < len(shortest):
                # Explore all related paths
                newPath = DFS(graph, node, end, path, shortest, toPrint)

                if newPath != None:
                    shortest = newPath
            
            elif toPrint:
                print("Already visited", node)
    
    return shortest
```

```{python}
# DFS called from a wrapper function to get recursion started properly
def shortestPath(graph, start, end, toPrint = False):
    return DFS(graph, start, end, [], None, toPrint)

# Test DFS
def testSP(source, destination):
    g = buildCityGraph(Digraph)
    sp = shortestPath(g, g.getNode(source), g.getNode(destination), toPrint = True)

    if sp != None:
        print("Shortest path from", source, "to", destination, "is", printPath(sp))
    else:
        print("There is no path from", source, "to", destination)

testSP("Boston", "Chicago")
testSP("Boston", "Phoenix")
testSP("Phoenix", "Chicago")
```

# Breadth First Search

Breadth first search (BFS) is an algorithm for searching a graph that starts at the root node and explores all nodes at the current depth before moving on to nodes at the next depth.

## Steps

1. Start at the initial node
2. Consider all edges that leave that node, in some order
3. Follow the first edge and check to see if it is the goal node
4. If not, try the next edge from the current node
5. Repeat Steps 2-4
6. Continue until either the goal node is found or run out of options
    - When you run out of edge options, move to next node at the same distance from the start
    - When you run out of node options, move to the next level in the graph and repeat

## Algorithm

```{python}
def BFS(graph, start, end, toPrint = False):
    initPath = [start]
    pathQueue = [initPath]

    while len(pathQueue) != 0:
        #> Get and remove the oldest element in pathQueue
        tmpPath = pathQueue.pop(0)

        if toPrint:
            print("Current BFS path:", printPath(tmpPath))
        
        lastNode = tmpPath[-1]

        if lastNode == end:
            return tmpPath
        
        for nextNode in graph.childrenOf(lastNode):
            if nextNode not in tmpPath:
                newPath = tmpPath + [nextNode]
                pathQueue.append(newPath)
    
    return None
```

```{python}
# BFS called from a wrapper function
def shortestPath(graph, start, end, toPrint = False):
    return BFS(graph, start, end, toPrint)

# Test BFS
def testSP(source, destination):
    g = buildCityGraph(Digraph)
    sp = shortestPath(g, g.getNode(source), g.getNode(destination), toPrint = True)

    if sp != None:
        print("Shortest path from", source, "to", destination, "is", printPath(sp))
    else:
        print("There is no path from", source, "to", destination)

testSP("Boston", "Chicago")
print()

testSP("Boston", "Phoenix")
print()

testSP("Phoenix", "Chicago")
```

# Weighted Shortest Path

- Want to minimize the sum of the weights of the edges, not the number of edges
- DFS can be easily modified to do this
- BFS cannot be easily modified to do this
  - Shortest weighted path may have more than the minimum number of hops